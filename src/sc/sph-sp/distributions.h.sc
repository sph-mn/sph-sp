(pre-define (distributions-template-h value-t value-type-name type-name)
  (declare
    ((pre-concat sp_ type-name _range) in start end out) (void value-t* sp-size-t sp-size-t value-t*)
    ((pre-concat sp_ type-name _additions) start summand count out)
    (void value-t value-t value-t value-t*)
    ((pre-concat sp_ type-name _multiplications) base count out) (void value-t sp-time-t value-t*)
    ((pre-concat sp_ type-name _odd-harmonics) base count out) (void value-t sp-time-t value-t*)
    ((pre-concat sp_ type-name _even-harmonics) base count out) (void value-t sp-time-t value-t*)
    ((pre-concat sp_ type-name _nth-harmonics) base k count out)
    (void value-t value-t sp-time-t value-t*)
    ((pre-concat sp_ type-name _cumulative) base deltas count out)
    (void value-t value-t* sp-time-t value-t*)
    ((pre-concat sp_ type-name _decumulative) base deltas count out)
    (void value-t value-t* sp-time-t value-t*)
    ((pre-concat sp_ type-name _prime-indexed) base count out) (void value-t sp-time-t value-t*)
    ((pre-concat sp_ type-name _modular-series) base mod delta count out)
    (void value-t sp-time-t sp-sample-t sp-time-t value-t*)
    ((pre-concat sp_ type-name _fixed_sets) base ratios len out)
    (void value-t value-t* value-t value-t*)
    ((pre-concat sp_ type-name _clustered) center spread count out)
    (void value-t value-t value-t value-t*)
    ((pre-concat sp_ type-name _linear) base k count out) (void value-t value-t value-t value-t*)
    ((pre-concat sp_ type-name _exponential) base k count out)
    (void value-t value-t value-t value-t*)
    ((pre-concat sp_ type-name _gaussian) base centre width count out)
    (void value-t value-t value-t value-t value-t*)
    ((pre-concat sp_ type-name _power) base p count out) (void value-t value-t value-t value-t*)
    ((pre-concat sp_ type-name _bessel) base count out) (void value-t value-t value-t*)
    ((pre-concat sp_ type-name _logistic) base k count out) (void value-t value-t value-t value-t*)))

(distributions-template-h sp-time-t time times)
(distributions-template-h sp-sample-t sample samples)

(declare
  (sp-sample-random-discrete-bounded cudist cudist-size range)
  (sp-sample-t sp-time-t* sp-time-t sp-sample-t)
  (sp-samples-geometric base ratio count out) (void sp-sample-t sp-sample-t sp-time-t sp-sample-t*)
  (sp-samples-logarithmic base scale count out) (void sp-sample-t sp-sample-t sp-time-t sp-sample-t*)
  (sp-times-geometric base ratio count out) (void sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-logarithmic base scale count out) (void sp-time-t sp-sample-t sp-time-t sp-time-t*)
  (sp-times-random-discrete-unique cudist cudist-size size out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t*)
  (sp-times-random-binary size out) (status-t sp-time-t sp-time-t*)
  (sp-time-random-discrete cudist cudist-size) (sp-time-t sp-time-t* sp-time-t)
  (sp-time-random-discrete-bounded cudist cudist-size range)
  (sp-time-t sp-time-t* sp-time-t sp-time-t)
  (sp-times-random-discrete cudist cudist-size count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t*)
  (sp-samples-beta-distribution base alpha beta-param count out)
  (void sp-sample-t sp-sample-t sp-sample-t sp-time-t sp-sample-t*)
  (sp-samples-binary-mask base pattern pattern-len count out)
  (void sp-sample-t uint8-t* sp-time-t sp-time-t sp-sample-t*)
  (sp-samples-segment-steps base levels segments count out)
  (void sp-sample-t sp-sample-t* sp-time-t sp-time-t sp-sample-t*))