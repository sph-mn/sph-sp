(pre-define (arrays-template-h value-t value-type-name type-name)
  (declare
    ((pre-concat sp_ value-type-name _sort-swap) a b c) (void void* ssize-t ssize-t)
    ((pre-concat sp_ value-type-name _sort-less) a b c) (uint8-t void* ssize-t ssize-t)
    ((pre-concat sp_ value-type-name _round-to-multiple) a base) (value-t value-t value-t)
    ((pre-concat sp_ type-name _min) in count) (value-t value-t* sp-size-t)
    ((pre-concat sp_ type-name _max) in count) (value-t value-t* sp-size-t)
    ((pre-concat sp_ type-name _absolute-max) in count) (value-t value-t* sp-size-t)
    ((pre-concat sp_ type-name _reverse) in count out) (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _equal) in count value) (sp-bool-t value-t* sp-size-t value-t)
    ((pre-concat sp_ type-name _square) in count) (void value-t* sp-size-t)
    ((pre-concat sp_ type-name _add) in-out count value) (void value-t* sp-size-t value-t)
    ((pre-concat sp_ type-name _multiply) in-out count value) (void value-t* sp-size-t value-t)
    ((pre-concat sp_ type-name _divide) in-out count value) (void value-t* sp-size-t value-t)
    ((pre-concat sp_ type-name _set) in-out count value) (void value-t* sp-size-t value-t)
    ((pre-concat sp_ type-name _subtract) in-out count value) (void value-t* sp-size-t value-t)
    ((pre-concat sp_ type-name _new) count out) (status-t sp-size-t value-t**)
    ((pre-concat sp_ type-name _copy) in count out) (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _cusum) in count out) (void value-t* value-t value-t*)
    ((pre-concat sp_ type-name _swap) in-out index-1 index-2) (void sp-time-t* sp-ssize-t sp-ssize-t)
    ((pre-concat sp_ type-name _shuffle) in count) (void value-t* sp-size-t)
    ((pre-concat sp_ type-name _array-free) in count) (void value-t** sp-size-t)
    ((pre-concat sp_ type-name _duplicate) a count out) (status-t value-t* sp-size-t value-t**)
    ((pre-concat sp_ type-name _and_ type-name) a b count limit out)
    (void value-t* value-t* sp-size-t value-t value-t*)
    ((pre-concat sp_ type-name _or_ type-name) a b count limit out)
    (void value-t* value-t* sp-size-t value-t value-t*)
    ((pre-concat sp_ type-name _xor_ type-name) a b count limit out)
    (void value-t* value-t* sp-size-t value-t value-t*)
    ((pre-concat sp_ type-name _multiply_ type-name) in-out count in)
    (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _divide_ type-name) in-out count in)
    (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _add_ type-name) in-out count in) (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _subtract_ type-name) in-out count in)
    (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _set_ type-name) in-out count in) (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _set_ type-name _left) in-out count in)
    (void value-t* sp-size-t value-t*)
    ((pre-concat sp_ type-name _sort-ascending) a count) (void value-t* sp-size-t)))

(pre-define
  (sp-samples-zero a size) (memset a 0 (* size (sizeof sp-sample-t)))
  (sp-times-zero a size) (memset a 0 (* size (sizeof sp-time-t)))
  (sp-time-interpolate-linear a b t)
  (sp-cheap-round-positive
    (+ (* (- 1 (convert-type t sp-sample-t)) (convert-type a sp-sample-t))
      (* t (convert-type b sp-sample-t))))
  (sp-sample-interpolate-linear a b t) (+ (* (- 1 t) a) (* t b))
  (sp-define-samples id value) (define id sp-sample-t* value)
  (sp-define-times id value) (define id sp-time-t* value)
  (sp-define-samples-new-srq id count)
  (begin (declare id sp-sample-t*) (status-require (sp-samples-new count &id)))
  (sp-define-times-srq id count)
  (begin (declare id sp-time-t*) (status-require (sp-times-new count &id))))

(declare
  (sp-shuffle swap in count) (void (function-pointer void void* sp-size-t sp-size-t) void* sp-size-t)
  (sp-u64-from-array a count) (uint64-t uint8-t* sp-time-t))

(sc-comment "times")
(pre-include "sph-sp/primes.h")
(arrays-template-h sp-time-t time times)

(declare
  (sp-time-sum in size) (sp-time-t sp-time-t* sp-time-t)
  (sp-times-sum a size) (sp-time-t sp-time-t* sp-time-t)
  (sp-times-display in count) (void sp-time-t* sp-size-t)
  (sp-times-permutations size set set-size out out-size)
  (status-t sp-time-t sp-time-t* sp-time-t sp-time-t*** sp-time-t*)
  (sp-times-sequence-increment in size set-size) (void sp-time-t* sp-size-t sp-size-t)
  (sp-times-compositions sum out out-size out-sizes)
  (status-t sp-time-t sp-time-t*** sp-time-t* sp-time-t**)
  (sp-times-select in indices count out) (void sp-time-t* sp-time-t* sp-time-t sp-time-t*)
  (sp-times-bits->times a size out) (void sp-time-t* sp-time-t sp-time-t*)
  (sp-times-gt-indices a size n out out-size)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t* sp-time-t*)
  (sp-times-select-random a size out out-size) (void sp-time-t* sp-time-t sp-time-t* sp-time-t*)
  (sp-times-constant count value out) (status-t sp-size-t sp-time-t sp-time-t**)
  (sp-times-scale in count factor out) (status-t sp-time-t* sp-size-t sp-time-t sp-time-t*)
  (sp-times-shuffle-swap a i1 i2) (void void* sp-size-t sp-size-t)
  (sp-times-scale-sum in count sum out) (void sp-time-t* sp-size-t sp-time-t sp-time-t*)
  (sp-times-contains in count value) (uint8-t sp-time-t* sp-size-t sp-time-t)
  (sp-times-sequences base digits size out) (void sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-blend a b fraction size out)
  (void sp-time-t* sp-time-t* sp-sample-t sp-time-t sp-time-t*)
  (sp-times-mask a b coefficients size out)
  (void sp-time-t* sp-time-t* sp-sample-t* sp-time-t sp-time-t*)
  (sp-times-extract-in-range a size min max out out-size)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t* sp-time-t*)
  (sp-times-make-seamless-right a a-count b b-count out)
  (void sp-time-t* sp-time-t sp-time-t* sp-time-t sp-time-t*)
  (sp-times-make-seamless-left a a-count b b-count out)
  (void sp-time-t* sp-time-t sp-time-t* sp-time-t sp-time-t*)
  (sp-times-limit a count n out) (void sp-time-t* sp-time-t sp-time-t sp-time-t*)
  (sp-times-scale-y in count target-y out) (void sp-time-t* sp-size-t sp-time-t sp-time-t*)
  (sp-times-remove in size index count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-insert-space in size index count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-subdivide-difference a size index count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times->samples in count out) (void sp-time-t* sp-size-t sp-sample-t*)
  (sp-times->samples-replace in count out) (status-t sp-time-t* sp-size-t sp-sample-t**))

(sc-comment "samples")
(arrays-template-h sp-sample-t sample samples)

(declare
  (sp-samples-display in count) (void sp-sample-t* sp-size-t)
  (sp-samples->times in count out) (void sp-sample-t* sp-size-t sp-time-t*)
  (sp-samples->times-replace in count out) (status-t sp-sample-t* sp-size-t sp-time-t**)
  (sp-samples->units in-out count) (void sp-sample-t* sp-size-t)
  (sp-samples-set-gain in-out count amp) (void sp-sample-t* sp-size-t sp-sample-t)
  (sp-samples-set-gain in-out count amp) (void sp-sample-t* sp-size-t sp-sample-t)
  (sp-samples-set-unity-gain in-out reference count) (void sp-sample-t* sp-sample-t* sp-size-t)
  (sp-samples-divisions start divisor count out)
  (void sp-sample-t sp-sample-t sp-time-t sp-sample-t*)
  (sp-samples-scale-y in count target-y) (void sp-sample-t* sp-time-t sp-sample-t)
  (sp-samples-scale-sum in count target-y out) (void sp-sample-t* sp-size-t sp-sample-t sp-sample-t*)
  (sp-samples-blend a b fraction size out)
  (void sp-sample-t* sp-sample-t* sp-sample-t sp-time-t sp-sample-t*)
  (sp-samples-limit-abs in count limit out) (void sp-sample-t* sp-time-t sp-sample-t sp-sample-t*))
