(pre-include "sph-sp/arrays-template.h")

(pre-define
  (sp-samples-zero a size) (memset a 0 (* size (sizeof sp-sample-t)))
  (sp-times-zero a size) (memset a 0 (* size (sizeof sp-time-t)))
  (sp-time-interpolate-linear a b t)
  (sp-cheap-round-positive
    (+ (* (- 1 (convert-type t sp-sample-t)) (convert-type a sp-sample-t))
      (* t (convert-type b sp-sample-t))))
  (sp-sample-interpolate-linear a b t) (+ (* (- 1 t) a) (* t b))
  (sp-sequence-set-equal a b)
  (and (= a.size b.size)
    (or (and (= 0 a.size) (= 0 b.size)) (= 0 (memcmp a.data b.data (* a.size (sizeof sp-time-t)))))))

(sc-comment "times")
(arrays-template-h sp-time-t time times)

(declare
  (sp-time-sum in size) (sp-time-t sp-time-t* sp-time-t)
  (sp-times-sum a size) (sp-time-t sp-time-t* sp-time-t)
  (sp-times-display in count) (void sp-time-t* sp-size-t)
  (sp-times-random-discrete cudist cudist-size count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t*)
  (sp-time-random-discrete cudist cudist-size) (sp-time-t sp-time-t* sp-time-t)
  (sp-time-random-custom cudist cudist-size range) (sp-time-t sp-time-t* sp-time-t sp-time-t)
  (sp-times-permutations size set set-size out out-size)
  (status-t sp-time-t sp-time-t* sp-time-t sp-time-t*** sp-time-t*)
  (sp-times-sequence-increment in size set-size) (void sp-time-t* sp-size-t sp-size-t)
  (sp-times-compositions sum out out-size out-sizes)
  (status-t sp-time-t sp-time-t*** sp-time-t* sp-time-t**)
  (sp-times-select in indices count out) (void sp-time-t* sp-time-t* sp-time-t sp-time-t*)
  (sp-times-bits->times a size out) (void sp-time-t* sp-time-t sp-time-t*)
  (sp-times-random-binary size out) (status-t sp-time-t sp-time-t*)
  (sp-times-gt-indices a size n out out-size)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t* sp-time-t*)
  (sp-times-select-random a size out out-size) (void sp-time-t* sp-time-t sp-time-t* sp-time-t*)
  (sp-times-constant count value out) (status-t sp-size-t sp-time-t sp-time-t**)
  (sp-times-scale in count factor out) (status-t sp-time-t* sp-size-t sp-time-t sp-time-t*)
  (sp-times-shuffle-swap a i1 i2) (void void* sp-size-t sp-size-t)
  (sp-times-scale-sum in count sum out) (void sp-time-t* sp-size-t sp-time-t sp-time-t*)
  (sp-times-multiplications start factor count out) (void sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-contains in count value) (uint8-t sp-time-t* sp-size-t sp-time-t)
  (sp-times-random-discrete-unique cudist cudist-size size out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t*)
  (sp-times-sequences base digits size out) (void sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-deduplicate a size out out-size) (status-t sp-time-t* sp-time-t sp-time-t* sp-time-t*)
  (sp-times-blend a b fraction size out)
  (void sp-time-t* sp-time-t* sp-sample-t sp-time-t sp-time-t*)
  (sp-times-mask a b coefficients size out)
  (void sp-time-t* sp-time-t* sp-sample-t* sp-time-t sp-time-t*)
  (sp-times-extract-in-range a size min max out out-size)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t* sp-time-t*)
  (sp-times-make-seamless-right a a-count b b-count out)
  (void sp-time-t* sp-time-t sp-time-t* sp-time-t sp-time-t*)
  (sp-times-make-seamless-left a a-count b b-count out)
  (void sp-time-t* sp-time-t sp-time-t* sp-time-t sp-time-t*)
  (sp-times-limit a count n out) (void sp-time-t* sp-time-t sp-time-t sp-time-t*)
  (sp-times-scale-y in count target-y out) (void sp-time-t* sp-size-t sp-time-t sp-time-t*)
  (sp-times-remove in size index count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-insert-space in size index count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t*)
  (sp-times-subdivide-difference a size index count out)
  (void sp-time-t* sp-time-t sp-time-t sp-time-t sp-time-t*))

(sc-comment "samples")
(arrays-template-h sp-sample-t sample samples)

(declare
  (sp-samples-display in count) (void sp-sample-t* sp-size-t)
  (sp-samples->times in count out) (void sp-sample-t* sp-size-t sp-time-t*)
  (sp-samples->units in-out count) (void sp-sample-t* sp-size-t)
  (sp-samples-set-gain in-out count amp) (void sp-sample-t* sp-size-t sp-sample-t)
  (sp-samples-set-gain in-out count amp) (void sp-sample-t* sp-size-t sp-sample-t)
  (sp-samples-set-unity-gain in-out reference count) (void sp-sample-t* sp-sample-t* sp-size-t)
  (sp-samples-divisions start divisor count out)
  (void sp-sample-t sp-sample-t sp-time-t sp-sample-t*)
  (sp-samples-scale-y in count target-y) (void sp-sample-t* sp-time-t sp-sample-t)
  (sp-samples-scale-sum in count target-y out) (void sp-sample-t* sp-size-t sp-sample-t sp-sample-t*)
  (sp-samples-blend a b fraction size out)
  (void sp-sample-t* sp-sample-t* sp-sample-t sp-time-t sp-sample-t*)
  (sp-samples-limit-abs in count limit out) (void sp-sample-t* sp-time-t sp-sample-t sp-sample-t*))

(sc-comment "extra")

(declare
  sp-sequence-set-key-t (type (struct (size sp-time-t) (data uint8-t*)))
  (sp-u64-from-array a count) (uint64-t uint8-t* sp-time-t))

(define (sp-sequence-set-hash a memory-size) (uint64-t sp-sequence-set-key-t sp-time-t)
  (return (modulo (sp-u64-from-array a.data a.size) memory-size)))

(sph-hashtable-declare-type sp-sequence-hashtable sp-sequence-set-key-t
  sp-time-t sp-sequence-set-hash sp-sequence-set-equal 2)

(define sp-sequence-set-null sp-sequence-set-key-t (struct-literal 0 0))

(sph-set-declare-type-nonull sp-sequence-set sp-sequence-set-key-t
  sp-sequence-set-hash sp-sequence-set-equal sp-sequence-set-null 2)

(sph-set-declare-type sp-time-set sp-time-t sph-set-hash-integer sph-set-equal-integer 0 1 2)

(declare
  sp-times-counted-sequences-t (type (struct (count sp-time-t) (sequence sp-time-t*)))
  (sp-shuffle swap in count) (void (function-pointer void void* sp-size-t sp-size-t) void* sp-size-t)
  (sp-times-counted-sequences-sort-swap a b c) (void void* sp-ssize-t sp-ssize-t)
  (sp-times-counted-sequences-sort-less a b c) (uint8-t void* sp-ssize-t sp-ssize-t)
  (sp-times-counted-sequences-sort-greater a b c) (uint8-t void* sp-ssize-t sp-ssize-t)
  (sp-times-counted-sequences-add a size width out)
  (void sp-time-t* sp-time-t sp-time-t sp-sequence-hashtable-t)
  (sp-times-counted-sequences-count a width b)
  (sp-time-t sp-time-t* sp-time-t sp-sequence-hashtable-t)
  (sp-times-counted-sequences-values known min out out-size)
  (void sp-sequence-hashtable-t sp-time-t sp-times-counted-sequences-t* sp-time-t*))