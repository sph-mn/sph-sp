(define (spline-path-new-get-2 out duration s1 s2)
  (int sp-sample-t* sp-time-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 2))
  (array-set segments 0 s1 1 s2)
  (return (spline-path-new-get 2 segments 0 duration out)))

(define (spline-path-new-get-3 out duration s1 s2 s3)
  (int sp-sample-t* sp-time-t spline-path-segment-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 3))
  (array-set segments 0 s1 1 s2 2 s3)
  (return (spline-path-new-get 3 segments 0 duration out)))

(define (spline-path-new-get-4 out duration s1 s2 s3 s4)
  (int sp-sample-t* sp-time-t spline-path-segment-t spline-path-segment-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 4))
  (array-set segments 0 s1 1 s2 2 s3 3 s4)
  (return (spline-path-new-get 4 segments 0 duration out)))

(define (sp-path-samples segment-count segments size out)
  (status-t spline-path-segment-count-t spline-path-segment-t* spline-path-time-t sp-sample-t**)
  status-declare
  (define a sp-sample-t* 0)
  (status-require (sp-samples-new size &a))
  (if (spline-path-new-get segment-count segments 0 size a) (begin (free a) sp-memory-error))
  (set *out a)
  (label exit (return status)))

(define (sp-path-times segment-count segments size out)
  (status-t spline-path-segment-count-t spline-path-segment-t* spline-path-time-t sp-time-t**)
  status-declare
  (declare b sp-time-t*)
  (define a sp-sample-t* 0)
  (status-require (sp-path-samples segment-count segments size &a))
  (status-require (sp-times-new size &b))
  (sp-samples->time a size b)
  (set *out b)
  (label exit (if a (free a)) (return status)))

(define (sp-path-samples-2 out size s1 s2)
  (status-t sp-sample-t** spline-path-time-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 2))
  (array-set segments 0 s1 1 s2)
  (return (sp-path-samples 2 segments size out)))

(define (sp-path-samples-3 out size s1 s2 s3)
  (status-t sp-sample-t** spline-path-time-t spline-path-segment-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 3))
  (array-set segments 0 s1 1 s2 2 s3)
  (return (sp-path-samples 3 segments size out)))

(define (sp-path-samples-4 out size s1 s2 s3 s4)
  (status-t sp-sample-t** spline-path-time-t spline-path-segment-t spline-path-segment-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 4))
  (array-set segments 0 s1 1 s2 2 s3 3 s4)
  (return (sp-path-samples 4 segments size out)))

(define (sp-path-times-2 out size s1 s2)
  (status-t sp-time-t** spline-path-time-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 2))
  (array-set segments 0 s1 1 s2)
  (return (sp-path-times 2 segments size out)))

(define (sp-path-times-3 out size s1 s2 s3)
  (status-t sp-time-t** spline-path-time-t spline-path-segment-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 3))
  (array-set segments 0 s1 1 s2 2 s3)
  (return (sp-path-times 3 segments size out)))

(define (sp-path-times-4 out size s1 s2 s3 s4)
  (status-t sp-time-t** spline-path-time-t spline-path-segment-t spline-path-segment-t spline-path-segment-t spline-path-segment-t)
  (declare segments (array spline-path-segment-t 4))
  (array-set segments 0 s1 1 s2 2 s3 3 s4)
  (return (sp-path-times 4 segments size out)))